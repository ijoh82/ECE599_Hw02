// Generated by gencpp from file joh_gap_finding/gaps.msg
// DO NOT EDIT!


#ifndef JOH_GAP_FINDING_MESSAGE_GAPS_H
#define JOH_GAP_FINDING_MESSAGE_GAPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joh_gap_finding
{
template <class ContainerAllocator>
struct gaps_
{
  typedef gaps_<ContainerAllocator> Type;

  gaps_()
    : numOfGaps(0)  {
    }
  gaps_(const ContainerAllocator& _alloc)
    : numOfGaps(0)  {
  (void)_alloc;
    }



   typedef int32_t _numOfGaps_type;
  _numOfGaps_type numOfGaps;





  typedef boost::shared_ptr< ::joh_gap_finding::gaps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joh_gap_finding::gaps_<ContainerAllocator> const> ConstPtr;

}; // struct gaps_

typedef ::joh_gap_finding::gaps_<std::allocator<void> > gaps;

typedef boost::shared_ptr< ::joh_gap_finding::gaps > gapsPtr;
typedef boost::shared_ptr< ::joh_gap_finding::gaps const> gapsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joh_gap_finding::gaps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joh_gap_finding::gaps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joh_gap_finding::gaps_<ContainerAllocator1> & lhs, const ::joh_gap_finding::gaps_<ContainerAllocator2> & rhs)
{
  return lhs.numOfGaps == rhs.numOfGaps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joh_gap_finding::gaps_<ContainerAllocator1> & lhs, const ::joh_gap_finding::gaps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joh_gap_finding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::joh_gap_finding::gaps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joh_gap_finding::gaps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joh_gap_finding::gaps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joh_gap_finding::gaps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joh_gap_finding::gaps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joh_gap_finding::gaps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joh_gap_finding::gaps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80967cdca74685dc952c88f8276188b1";
  }

  static const char* value(const ::joh_gap_finding::gaps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80967cdca74685dcULL;
  static const uint64_t static_value2 = 0x952c88f8276188b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::joh_gap_finding::gaps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joh_gap_finding/gaps";
  }

  static const char* value(const ::joh_gap_finding::gaps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joh_gap_finding::gaps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 numOfGaps\n"
;
  }

  static const char* value(const ::joh_gap_finding::gaps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joh_gap_finding::gaps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numOfGaps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gaps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joh_gap_finding::gaps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joh_gap_finding::gaps_<ContainerAllocator>& v)
  {
    s << indent << "numOfGaps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numOfGaps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOH_GAP_FINDING_MESSAGE_GAPS_H
